<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_geometry_1_1_bcc_grid" kind="class" prot="public">
    <compoundname>Geometry::BccGrid</compoundname>
    <basecompoundref refid="class_geometry_1_1_grid" prot="public" virt="non-virtual">Geometry::Grid&lt; T &gt;</basecompoundref>
    <includes refid="_bcc_grid_8h" local="no">BccGrid.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_geometry_1_1_bcc_grid_1a564dbc30d8aa35bfe9c8d4f3080e6bff" prot="protected" static="no" mutable="no">
        <type><ref refid="class_geometry_1_1_cc_grid" kindref="compound">CcGrid</ref>&lt; T &gt;</type>
        <definition>CcGrid&lt;T&gt; baseCc</definition>
        <argsstring></argsstring>
        <name>baseCc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="20" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_geometry_1_1_bcc_grid_1a3b4f9de00f6c1bd43ea459473200f137" prot="protected" static="no" mutable="no">
        <type><ref refid="class_geometry_1_1_cc_grid" kindref="compound">CcGrid</ref>&lt; T &gt;</type>
        <definition>CcGrid&lt;T&gt; translatedCc</definition>
        <argsstring></argsstring>
        <name>translatedCc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="21" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1a454e098d6ce5f7da2d7489b6927a011d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BccGrid</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;baseOrigin, const T &amp;sideLength)</argsstring>
        <name>BccGrid</name>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>baseOrigin</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>sideLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>c&apos;tor with arguments <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>- the origin point in world coordinates of the base CC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sideLength</parametername>
</parameternamelist>
<parameterdescription>
<para>- the side length of the unit cell (should be a positive number) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="30" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1a31f75e1d9923ef16f08abfc1fcfa939f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setSideLength</definition>
        <argsstring>(const T &amp;sideLength)</argsstring>
        <name>setSideLength</name>
        <param>
          <type>const T &amp;</type>
          <declname>sideLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can set the side length (resolution) of the grid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sideLength</parametername>
</parameternamelist>
<parameterdescription>
<para>- the side length of the unit cell (should be a positive number) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="40" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1ac4cc89dbd0cf8ea48d204b3dda86db72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T getSideLength</definition>
        <argsstring>() const </argsstring>
        <name>getSideLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the actual value of the side length of the unit cell. <simplesect kind="return"><para>- the actual side length of the unit cell </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="47" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1ad4f551157f1aef8e0020c1708e607aed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setOrigin</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;baseOrigin)</argsstring>
        <name>setOrigin</name>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>baseOrigin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can set origin of the grid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>- the new origin </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="53" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1a835c7cb37506f78b00265bdee05795e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; getOrigin</definition>
        <argsstring>() const </argsstring>
        <name>getOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the actual value of the origin of the grid. <simplesect kind="return"><para>- the actual origin of the grid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="60" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1a4bbb251dd45b8dab47447f175b8e791c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; getNearestPoint</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;point, const Utilities::TypeOperators&lt; T &gt; &amp;Toperators) const </argsstring>
        <name>getNearestPoint</name>
        <reimplements refid="class_geometry_1_1_grid_1a2cdc42bd1e012a3b8473d518b7c2f6b0">getNearestPoint</reimplements>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators</ref>&lt; T &gt; &amp;</type>
          <declname>Toperators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can return the lattice point in whose Voronoi-region is the given point. This lattice point is the nearest neighbour point of the given point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>- the point whose nearest neighbour we are looking for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Toperators</parametername>
</parameternamelist>
<parameterdescription>
<para>- the operators object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- the nearest neighbour point in the lattice in world coordinates (not in lattice locale coordinates!) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="74" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="142" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1a08afd8625c48e19c2f0e14d92eb50167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &gt;</type>
        <definition>Vector&lt; Vector&lt; T &gt; &gt; getFirstNeighbourCellVertices</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;point) const </argsstring>
        <name>getFirstNeighbourCellVertices</name>
        <reimplements refid="class_geometry_1_1_grid_1a7947b840d23ada9abd70df77ce4a9c06">getFirstNeighbourCellVertices</reimplements>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gets a point, and returns in a vector all of the first neighbour points of this. The method doesn&apos;t check, if the point in the argument fits a lattice point, or not! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>- the point whose first neighbours we are looking for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- a vector of the first neighbours (each is given in world coordinates!) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="83" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_bcc_grid_1ab4c0f69ae16cd070e5612327aac89159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &gt;</type>
        <definition>Vector&lt; Vector&lt; T &gt; &gt; getLerpVertices</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;point, const Utilities::TypeOperators&lt; T &gt; &amp;Toperators) const </argsstring>
        <name>getLerpVertices</name>
        <reimplements refid="class_geometry_1_1_grid_1a43bd5e3ba4d39448cd92477df03b84a2">getLerpVertices</reimplements>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators</ref>&lt; T &gt; &amp;</type>
          <declname>Toperators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method gets a point, and returns in a vector all of the vertices whose value influences the linear interpolation of the selected point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>- the point whose lerp-vertices we are looking for </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="91" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="169" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class represents a &quot;body centered cubic grid&quot; (BCC grid) in 3D. This representation is based on two simple 3D cubic grid. (one is displaced relative to the other) </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>Grid&lt; T &gt;</label>
        <link refid="class_geometry_1_1_grid"/>
      </node>
      <node id="8">
        <label>BccGrid&lt; T &gt;</label>
        <link refid="class_geometry_1_1_bcc_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>Grid&lt; T &gt;</label>
        <link refid="class_geometry_1_1_grid"/>
      </node>
      <node id="10">
        <label>BccGrid&lt; T &gt;</label>
        <link refid="class_geometry_1_1_bcc_grid"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" line="18" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/BccGrid.h" bodystart="17" bodyend="92"/>
    <listofallmembers>
      <member refid="class_geometry_1_1_bcc_grid_1a564dbc30d8aa35bfe9c8d4f3080e6bff" prot="protected" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>baseCc</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a454e098d6ce5f7da2d7489b6927a011d" prot="public" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>BccGrid</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a08afd8625c48e19c2f0e14d92eb50167" prot="public" virt="virtual"><scope>Geometry::BccGrid</scope><name>getFirstNeighbourCellVertices</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1ab4c0f69ae16cd070e5612327aac89159" prot="public" virt="virtual"><scope>Geometry::BccGrid</scope><name>getLerpVertices</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a4bbb251dd45b8dab47447f175b8e791c" prot="public" virt="virtual"><scope>Geometry::BccGrid</scope><name>getNearestPoint</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a835c7cb37506f78b00265bdee05795e6" prot="public" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>getOrigin</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1ac4cc89dbd0cf8ea48d204b3dda86db72" prot="public" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>getSideLength</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1ad4f551157f1aef8e0020c1708e607aed" prot="public" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>setOrigin</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a31f75e1d9923ef16f08abfc1fcfa939f" prot="public" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>setSideLength</name></member>
      <member refid="class_geometry_1_1_bcc_grid_1a3b4f9de00f6c1bd43ea459473200f137" prot="protected" virt="non-virtual"><scope>Geometry::BccGrid</scope><name>translatedCc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
