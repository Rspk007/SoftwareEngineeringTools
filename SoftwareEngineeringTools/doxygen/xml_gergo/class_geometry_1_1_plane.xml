<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="class_geometry_1_1_plane" kind="class" prot="public">
    <compoundname>Geometry::Plane</compoundname>
    <basecompoundref refid="class_geometry_1_1_i_shape" prot="public" virt="non-virtual">Geometry::IShape&lt; T &gt;</basecompoundref>
    <includes refid="_plane_8h" local="no">Plane.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_geometry_1_1_plane_1aa7b243864338e643656feeb2fa4ccfbb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; normalVector</definition>
        <argsstring></argsstring>
        <name>normalVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="19" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_geometry_1_1_plane_1ad4e45818b9c5c15da68a84bb59576bd2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; point</definition>
        <argsstring></argsstring>
        <name>point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="20" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_geometry_1_1_plane_1a242f153285fa75214215c0bd7cf82680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Plane</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;normalVector, const Vector&lt; T &gt; &amp;point)</argsstring>
        <name>Plane</name>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>normalVector</declname>
        </param>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>c&apos;tor with arguments <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalVector</parametername>
</parameternamelist>
<parameterdescription>
<para>- a normal vector of the plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>- a point fitting the plane </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="28" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_plane_1a46cadd1148ff6a6ee448d556c8b2a909" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; getNormal</definition>
        <argsstring>() const </argsstring>
        <name>getNormal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can return a normal vector of the plane. <simplesect kind="return"><para>- a normal vector (not necessarily unit vector!) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="37" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_plane_1a0ed558489fd932d65c18e1fe6ea5d36f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool fitsPoint</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;pointToCheck, const Utilities::TypeOperators&lt; T &gt; &amp;Toperators) const </argsstring>
        <name>fitsPoint</name>
        <reimplements refid="class_geometry_1_1_i_shape_1af76e4d614fde54d8572ff3686b157456">fitsPoint</reimplements>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>pointToCheck</declname>
        </param>
        <param>
          <type>const <ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators</ref>&lt; T &gt; &amp;</type>
          <declname>Toperators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can decide if a point fits the plane or not. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>- the point to be checked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Toperators</parametername>
</parameternamelist>
<parameterdescription>
<para>- the operators object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- true if the point fits the plane (and false otherwise) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="49" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="82" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_geometry_1_1_plane_1aae711dcbf18946964b9c42502e9d3377" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="struct_geometry_1_1_intersection" kindref="compound">Intersection</ref>&lt; T &gt; &gt;</type>
        <definition>Vector&lt; Intersection&lt; T &gt; &gt; intersect</definition>
        <argsstring>(const Ray&lt; T &gt; &amp;ray, const Vector&lt; Intersection&lt; T &gt;&gt; *bounds=0, const T &amp;scale=T(), const Utilities::TypeOperators&lt; T &gt; &amp;Toperators=Utilities::TypeOperators&lt; T &gt;()) const </argsstring>
        <name>intersect</name>
        <reimplements refid="class_geometry_1_1_i_shape_1ab7b27cca569f9eae8628dd93e54c2d3e">intersect</reimplements>
        <param>
          <type>const <ref refid="class_geometry_1_1_ray" kindref="compound">Ray</ref>&lt; T &gt; &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type>const <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="struct_geometry_1_1_intersection" kindref="compound">Intersection</ref>&lt; T &gt;&gt; *</type>
          <declname>bounds</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>scale</declname>
          <defval>T()</defval>
        </param>
        <param>
          <type>const <ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators</ref>&lt; T &gt; &amp;</type>
          <declname>Toperators</declname>
          <defval><ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators</ref>&lt; T &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that implements the intersection with the concrete object. If no intersection was found, it will return an empty <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>. (0D <ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>- the intersection ray </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>- the bounds between the intersection will be looked for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>- scale used by ray casting algorithms </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Toperators</parametername>
</parameternamelist>
<parameterdescription>
<para>- the operators object of type T </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The collection of intersections in ascending order of dimension time. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="61" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="92" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This abstract class represents a plane in the euclidean space. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="152">
        <label>IShape&lt; T &gt;</label>
        <link refid="class_geometry_1_1_i_shape"/>
        <childnode refid="153" relation="public-inheritance">
        </childnode>
      </node>
      <node id="151">
        <label>Plane&lt; T &gt;</label>
        <link refid="class_geometry_1_1_plane"/>
        <childnode refid="152" relation="public-inheritance">
        </childnode>
      </node>
      <node id="153">
        <label>IIntersectable&lt; T &gt;</label>
        <link refid="class_geometry_1_1_i_intersectable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="155">
        <label>IShape&lt; T &gt;</label>
        <link refid="class_geometry_1_1_i_shape"/>
        <childnode refid="156" relation="public-inheritance">
        </childnode>
      </node>
      <node id="154">
        <label>Plane&lt; T &gt;</label>
        <link refid="class_geometry_1_1_plane"/>
        <childnode refid="155" relation="public-inheritance">
        </childnode>
      </node>
      <node id="156">
        <label>IIntersectable&lt; T &gt;</label>
        <link refid="class_geometry_1_1_i_intersectable"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" line="17" column="1" bodyfile="C:/Users/Jurecska/Desktop/Új mappa/Plane.h" bodystart="16" bodyend="63"/>
    <listofallmembers>
      <member refid="class_geometry_1_1_plane_1a0ed558489fd932d65c18e1fe6ea5d36f" prot="public" virt="virtual"><scope>Geometry::Plane</scope><name>fitsPoint</name></member>
      <member refid="class_geometry_1_1_plane_1a46cadd1148ff6a6ee448d556c8b2a909" prot="public" virt="non-virtual"><scope>Geometry::Plane</scope><name>getNormal</name></member>
      <member refid="class_geometry_1_1_plane_1aae711dcbf18946964b9c42502e9d3377" prot="public" virt="virtual"><scope>Geometry::Plane</scope><name>intersect</name></member>
      <member refid="class_geometry_1_1_plane_1aa7b243864338e643656feeb2fa4ccfbb" prot="protected" virt="non-virtual"><scope>Geometry::Plane</scope><name>normalVector</name></member>
      <member refid="class_geometry_1_1_plane_1a242f153285fa75214215c0bd7cf82680" prot="public" virt="non-virtual"><scope>Geometry::Plane</scope><name>Plane</name></member>
      <member refid="class_geometry_1_1_plane_1ad4e45818b9c5c15da68a84bb59576bd2" prot="protected" virt="non-virtual"><scope>Geometry::Plane</scope><name>point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
