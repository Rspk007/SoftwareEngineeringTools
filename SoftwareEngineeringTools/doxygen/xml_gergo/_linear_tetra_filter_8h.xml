<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="_linear_tetra_filter_8h" kind="file">
    <compoundname>LinearTetraFilter.h</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="_filter_8h" local="yes">Filter.h</includes>
    <includes refid="_volume_8h" local="yes">Volume.h</includes>
    <includes refid="_vector_8h" local="yes">Vector.h</includes>
    <includes refid="_grid_8h" local="yes">Grid.h</includes>
    <includes refid="_bcc_grid_8h" local="yes">BccGrid.h</includes>
    <includes refid="_type_operators_8h" local="yes">TypeOperators.h</includes>
    <includes refid="_constants_8h" local="yes">Constants.h</includes>
    <includedby refid="main_8cpp" local="yes">Új mappa/main.cpp</includedby>
    <incdepgraph>
      <node id="301">
        <label>Vector.h</label>
        <link refid="_vector_8h"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>cmath</label>
      </node>
      <node id="303">
        <label>stdexcept</label>
      </node>
      <node id="304">
        <label>Point.h</label>
        <link refid="_point_8h"/>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>Line.h</label>
        <link refid="_line_8h"/>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="313">
        <label>Grid.h</label>
        <link refid="_grid_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>IIntersectable.h</label>
        <link refid="_i_intersectable_8h"/>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>Material.h</label>
        <link refid="_material_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>BccGrid.h</label>
        <link refid="_bcc_grid_8h"/>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>Volume.h</label>
        <link refid="_volume_8h"/>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>Ray.h</label>
        <link refid="_ray_8h"/>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="302">
        <label>iostream</label>
      </node>
      <node id="306">
        <label>TypeOperators.h</label>
        <link refid="_type_operators_8h"/>
      </node>
      <node id="296">
        <label>Új mappa/LinearTetraFilter.h</label>
        <link refid="LinearTetraFilter.h"/>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
      </node>
      <node id="305">
        <label>Primitive.h</label>
        <link refid="_primitive_8h"/>
      </node>
      <node id="316">
        <label>Constants.h</label>
        <link refid="_constants_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>Filter.h</label>
        <link refid="_filter_8h"/>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
      </node>
      <node id="300">
        <label>ISampleable.h</label>
        <link refid="_i_sampleable_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>CcGrid.h</label>
        <link refid="_cc_grid_8h"/>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>Surface.h</label>
        <link refid="_surface_8h"/>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>Intersection.h</label>
        <link refid="_intersection_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="318">
        <label>Új mappa/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="317">
        <label>Új mappa/LinearTetraFilter.h</label>
        <link refid="LinearTetraFilter.h"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_sampling_1_1_linear_tetra_filter" prot="public">Sampling::LinearTetraFilter</innerclass>
    <innernamespace refid="namespace_sampling">Sampling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LINEARTETRAFILTER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINEARTETRAFILTER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_filter_8h" kindref="compound">Filter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_volume_8h" kindref="compound">Volume.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vector_8h" kindref="compound">Vector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;Matrix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_grid_8h" kindref="compound">Grid.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_bcc_grid_8h" kindref="compound">BccGrid.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_type_operators_8h" kindref="compound">TypeOperators.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_constants_8h" kindref="compound">Constants.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Geometry;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Sampling</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>of<sp/>the<sp/>coordinates<sp/>in<sp/>the<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_sampling_1_1_linear_tetra_filter" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sampling_1_1_linear_tetra_filter" kindref="compound">LinearTetraFilter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_sampling_1_1_filter" kindref="compound">Filter</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_linear_tetra_filter" kindref="compound">LinearTetraFilter</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_linear_tetra_filter" kindref="compound">LinearTetraFilter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sampling_1_1_volume" kindref="compound">Volume&lt;T&gt;</ref>*<sp/>filteredObject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_geometry_1_1_bcc_grid" kindref="compound">BccGrid&lt;T&gt;</ref>*<sp/>grid);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>OVERRIDE<sp/>FUNCTIONS<sp/>----<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/>getValueAt(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators&lt;T&gt;</ref>&amp;<sp/>Toperators<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>DEFINITIONS<sp/>----<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="class_sampling_1_1_linear_tetra_filter_1a5cf0b7a08ecd66f914b411f60d89273f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_linear_tetra_filter" kindref="compound">LinearTetraFilter&lt;T&gt;::LinearTetraFilter</ref>():</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_filter" kindref="compound">Filter</ref>&lt;T&gt;::<ref refid="class_sampling_1_1_filter" kindref="compound">Filter</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="class_sampling_1_1_linear_tetra_filter_1a6b06a8935674a42502ffb246a40b7d2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_linear_tetra_filter_1a5cf0b7a08ecd66f914b411f60d89273f" kindref="member">LinearTetraFilter&lt;T&gt;::LinearTetraFilter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sampling_1_1_volume" kindref="compound">Volume&lt;T&gt;</ref>*<sp/>filteredObject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_geometry_1_1_bcc_grid" kindref="compound">BccGrid&lt;T&gt;</ref>*<sp/>grid):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sampling_1_1_filter" kindref="compound">Filter</ref>&lt;T&gt;::<ref refid="class_sampling_1_1_filter" kindref="compound">Filter</ref>(filteredObject,<sp/>grid)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="68" refid="class_sampling_1_1_linear_tetra_filter_1ae7fe064de3b279d74867a690bd6f4953" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="class_sampling_1_1_linear_tetra_filter_1ae7fe064de3b279d74867a690bd6f4953" kindref="member">LinearTetraFilter&lt;T&gt;::getValueAt</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators&lt;T&gt;</ref>&amp;<sp/>Toperators<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>isActive()<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it&apos;s<sp/>not<sp/>active,<sp/>return<sp/>the<sp/>unfiltered<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredObject<sp/>==<sp/>0<sp/>||<sp/>grid<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>values<sp/>of<sp/>the<sp/>sampled<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFilteredObject()-&gt;getValueAt(<sp/>point,<sp/>Toperators<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>value<sp/>=<sp/>T();<sp/></highlight><highlight class="comment">//<sp/>value<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>grid<sp/>vertices<sp/>to<sp/>be<sp/>used<sp/>to<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;Vector&lt;T&gt;</ref>&gt;<sp/>lerpVertices<sp/>=<sp/>getGrid()-&gt;getLerpVertices(<sp/>point,<sp/>Toperators<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexCount<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>lerpVertices.getDim();<sp/>//<sp/>should<sp/>be<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>3<sp/>spanning<sp/>vectors<sp/>of<sp/>the<sp/>big<sp/>tetrahedron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;Vector&lt;T&gt;</ref>&gt;<sp/>bigTetrahedron;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigTetrahedron[0]<sp/>=<sp/>lerpVertices[1]<sp/>-<sp/>lerpVertices[0];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigTetrahedron[1]<sp/>=<sp/>lerpVertices[2]<sp/>-<sp/>lerpVertices[0];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigTetrahedron[2]<sp/>=<sp/>lerpVertices[3]<sp/>-<sp/>lerpVertices[0];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>bigVolume<sp/>=<sp/><ref refid="namespace_sampling_1a42e746bb67d4dac83a4dcf06ad91c73d" kindref="member">getParallelepipedVolume</ref>(<sp/>bigTetrahedron,<sp/>Toperators<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Toperators.abs(<sp/>Matrix&lt;T&gt;(<sp/>bigTetrahedron<sp/>).getDet()<sp/>);<sp/>//<sp/>volume<sp/>of<sp/>parallelepiped!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>volume<sp/>of<sp/>the<sp/>whole<sp/>interpolation<sp/>cell<sp/>is<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>return<sp/>the<sp/>value<sp/>from<sp/>a<sp/>close<sp/>grid<sp/>vertex<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Toperators.<ref refid="class_utilities_1_1_type_operators_1a01f8ffb315882112eded9817279c652c" kindref="member">equals</ref>(<sp/>bigVolume,<sp/>T()<sp/>)<sp/>)<sp/></highlight><highlight class="comment">//<sp/>bigVolume<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getFilteredObject()-&gt;getValueAt(<sp/>lerpVertices[0],<sp/>Toperators<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>4<sp/>possible<sp/>spanning<sp/>vectors<sp/>of<sp/>a<sp/>little<sp/>tetrahedron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;Vector&lt;T&gt;</ref>&gt;<sp/>tetrahedronSpanners(<sp/>vertexCount<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>vertexCount;<sp/>++<sp/>ii)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tetrahedronSpanners[ii]<sp/>=<sp/>lerpVertices[ii]<sp/>-<sp/>point;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>vertexCount;<sp/>++<sp/>ii)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;Vector&lt;T&gt;</ref>&gt;<sp/>littleTetrahedron;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>3;<sp/>++<sp/>jj)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>littleTetrahedron[jj]<sp/>=<sp/>tetrahedronSpanners[(ii<sp/>+<sp/>jj)<sp/>%<sp/>vertexCount];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>barycentric<sp/>coordinate<sp/>to<sp/>this<sp/>vertex<sp/>using<sp/>operator/<sp/>of<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>weight<sp/>=<sp/><ref refid="namespace_sampling_1a42e746bb67d4dac83a4dcf06ad91c73d" kindref="member">getParallelepipedVolume</ref>(<sp/>littleTetrahedron,<sp/>Toperators<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Toperators.abs(<sp/>Matrix&lt;T&gt;(<sp/>littleTetrahedron<sp/>).getDet()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>weight<sp/>*<sp/>getFilteredObject()-&gt;getValueAt(<sp/>lerpVertices[(ii<sp/>+<sp/>3)<sp/>%<sp/>vertexCount],<sp/>Toperators<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>/<sp/>bigVolume;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>GLOBAL<sp/>FUNCTIONS<sp/>----<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124" refid="namespace_sampling_1a42e746bb67d4dac83a4dcf06ad91c73d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespace_sampling_1a42e746bb67d4dac83a4dcf06ad91c73d" kindref="member">getParallelepipedVolume</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_geometry_1_1_vector" kindref="compound">Vector</ref>&lt;<ref refid="class_geometry_1_1_vector" kindref="compound">Vector&lt;T&gt;</ref>&gt;&amp;<sp/>spanners,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_utilities_1_1_type_operators" kindref="compound">Utilities::TypeOperators&lt;T&gt;</ref>&amp;<sp/>Toperators)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>a<sp/>=<sp/>(spanners[0]).getAbs();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>b<sp/>=<sp/>(spanners[1]).getAbs();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>c<sp/>=<sp/>(spanners[2]).getAbs();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Toperators.<ref refid="class_utilities_1_1_type_operators_1a01f8ffb315882112eded9817279c652c" kindref="member">equals</ref>(a,<sp/>T())<sp/>||<sp/></highlight><highlight class="comment">//<sp/>a<sp/>or<sp/>b<sp/>or<sp/>c<sp/>equals<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Toperators.<ref refid="class_utilities_1_1_type_operators_1a01f8ffb315882112eded9817279c652c" kindref="member">equals</ref>(b,<sp/>T())<sp/>||</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Toperators.<ref refid="class_utilities_1_1_type_operators_1a01f8ffb315882112eded9817279c652c" kindref="member">equals</ref>(c,<sp/>T())<sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>cos_alpha<sp/>=<sp/>(spanners[1]<sp/>*<sp/>spanners[2])<sp/>/<sp/>b<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>cos_beta<sp/><sp/>=<sp/>(spanners[0]<sp/>*<sp/>spanners[2])<sp/>/<sp/>a<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>cos_gamma<sp/>=<sp/>(spanners[0]<sp/>*<sp/>spanners[1])<sp/>/<sp/>a<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>sqrt_in<sp/>=<sp/>1.0<sp/>+<sp/>2.0*cos_alpha*cos_beta*cos_gamma<sp/>-<sp/>cos_alpha*cos_alpha<sp/>-<sp/>cos_beta*cos_beta<sp/>-<sp/>cos_gamma*cos_gamma;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>0<sp/>because<sp/>of<sp/>numerical<sp/>instability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a*b*c<sp/>*<sp/>((Toperators.<ref refid="class_utilities_1_1_type_operators_1ac0c4e4d72daedaf61ac5b3f10832abc2" kindref="member">greaterThan</ref>(T(),<sp/>sqrt_in))<sp/>?<sp/>T()<sp/>:<sp/>sqrt(<sp/>sqrt_in<sp/>));<sp/></highlight><highlight class="comment">//<sp/>sqrt_in<sp/>&lt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LINEARTETRAFILTER_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jurecska/Desktop/Új mappa/LinearTetraFilter.h"/>
  </compounddef>
</doxygen>
